function BattleScreen(canvasId, audioId, menuId){  Screen.call(this, canvasId, audioId, menuId);  this.background;  this.mobs = [];  this.heros = [];  this.timeElapsed = 0.0;  this.battleStartedAt = 0;  this.introFinished = false;    this.aMobHasMoved = true;  this.aHeroHasMoved = true;}BattleScreen.prototype = new Screen();BattleScreen.prototype.handleKeys = function(evt){  var key = evt.keyCode;  if (key == 13){    alert('hey, you did something on the battle screen.');  }}// This function handles hiding the UI for battle screen, // and contains a callback for loading what ever is loaded nextBattleScreen.prototype.Hide = function(callbackFunc){  $('div#battle_menu').fadeOut();  $('#battle_screen').fadeOut(function(){    callbackFunc.call();  });}BattleScreen.prototype.EnterBattle = function(background, theseMobs, heroes, music){  battleScreen.playBattleTransitionSound();  battleScreen.doBattleTransitionEffect();  //wait for transition to complete...  battleScreen.startBattleMusic(music);    this.mobs = theseMobs;  if (heroes != undefined){this.heroes = heroes;}  this.background = background;  this.battleStartedAt = gameTime;    battleScreen.paintBackground(background);      // display the UI for the battle  battleScreen.DisplayUI();    // Draw heroes running in...  $.each(this.mobs, function(i, mob) {     mob.setPositionOffscreen();  });}BattleScreen.prototype.DisplayUI = function(){  $('#battle_background').show();  $('#battle_screen').show();  $('div#battle_menu').show();  currentScreen = "battle_screen";}//BattleScreen.mobs = function(){}// 1)  Image data// 2)  ID// 3)  Name// 4)  Combat statsvar offsetForSlideIn;BattleScreen.prototype.renderBattleScene = function(){    if (this.aHeroHasMoved){    $.each(this.heroes, function(i, hero) {      hero.drawUnit();    });    this.aHeroHasMoved = false;  }    // for each mob in mobs...  if (this.aMobHasMoved){    $.each(this.mobs, function(i, mob) {       mob.drawUnit();    });    this.aMobHasMoved = false;  }      if(debugMode){ //battleScreen.context.fillText(gameTime, 10, 10);    drawGraphicsDebugInfo(this);  }  }// How many seconds should I wait before rolling another update?BattleScreen.prototype.update = function(secondsPassed){  this.timeElapsed = gameTime - this.battleStartedAt;    this.RushInEffect_allAtOnce();    this.HoverEffect_simpleBird();  //this.HoverEffect_nonUniformHover();}// an effect that occurs in the first few seconds of the battle// where the mobs rush into the battle field all at once...BattleScreen.prototype.RushInEffect_allAtOnce = function(){  var speed = 45;    if (this.mobs[0].x < this.mobs[0].position[0]){    if (this.mobs[0].x + speed > this.mobs[0].position[0]){      $.each(this.mobs, function(i, mob){        mob.setX(mob.position[0]);      });    }    else{      $.each(this.mobs, function(i, mob){        mob.setX(mob.x + speed);      });    }  }  else if(!this.introFinished){    $.each(this.mobs, function(i, mob){      mob.setX(mob.position[0]);    });    this.introFinished = true;  }}// hovering effect for birds and stuff... This algo is where they all hover at the same exact rate/apex ratiovar tickCount = 0;BattleScreen.prototype.HoverEffect_simpleBird = function(){  var step = 1;  var slowness = 4;  if ( this.introFinished ){        tickCount++;    if(tickCount % slowness == 0){  // don't run this every time, just everyonce in a while            $.each(this.mobs, function(i, mob){        if (mob.stance == "flying"){                    var isGoingUp = mob.speedY >= 0;  // check if the mob is going up or going down.  We use this condition later          var isGoingDown = mob.speedY < 0;                    if(isGoingUp){ // if the mob is headed upwards...            mob.setY(mob.y + step); // move the mob up one step            if (mob.y >= mob.apex + mob.position[1]){  // if the mob has reached it's max height, flip the mob to be going down              mob.speedY = -1;            }          }          else if (isGoingDown){ // if the mob is on it's way down...            mob.setY(mob.y - step);            if (mob.y <= mob.nadir + mob.position[1]){  // if the mob has reached it's min height, flip the mob to be going up              mob.speedY = 1;            }          }                  }      });    }  }}// hovering effect for mobs that don't all go up and down at the same exact time...var tickCount = 0;BattleScreen.prototype.HoverEffect_nonUniformHover = function(){  var step = 1;  var slowness = 4;  if ( this.introFinished ){        tickCount++;    if(tickCount % slowness == 0){  // don't run this every time, just everyonce in a while            $.each(this.mobs, function(i, mob){        if (mob.stance == "flying"){                    var isGoingUp = mob.speedY >= 0;  // check if the mob is going up or going down.  We use this condition later          var isGoingDown = mob.speedY < 0;                    if(isGoingUp){ // if the mob is headed upwards...            mob.setY(mob.y + step); // move the mob up one step            if (mob.y >= mob.apex + mob.position[1]){  // if the mob has reached it's max height, flip the mob to be going down              mob.speedY = -1;            }          }          else if (isGoingDown){ // if the mob is on it's way down...            mob.setY(mob.y - step);            if (mob.y <= mob.nadir + mob.position[1]){  // if the mob has reached it's min height, flip the mob to be going up              mob.speedY = 1;            }          }                  }      });    }  }}BattleScreen.prototype.playBattleTransitionSound = function(){}BattleScreen.prototype.doBattleTransitionEffect = function(){}BattleScreen.prototype.startBattleMusic = function (){}BattleScreen.prototype.paintBackground = function(background){  if (background == undefined){    background = this.background;  }    var width = background.width; //this.context.canvas.width;  var height = background.height; //this.context.canvas.height;    var btlbg = document.getElementById('battle_background').getContext('2d');
  btlbg.drawImage(background, 
    0, 0, 
    width,
    height); }